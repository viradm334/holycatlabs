// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  address String?
  city String?
  province String?
  postal_code String?
  phoneNumber String?
  role Role @default(CUSTOMER)
  created_at DateTime @default(now())
  cart Cart?
  orders Order[]
}

model Category {
  id String @id @default(uuid())
  name String
  slug String @unique
  products Product[]
  created_at DateTime @default(now())
}

model Product {
  id String @id @default(uuid())
  name String
  slug String @unique
  description String? @db.LongText
  imageUrl String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  price Float @default(0)
  stock Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  orderItems OrderItem[]
  cartItems CartItem[]
}

model Cart {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  created_at DateTime @default(now())
  items CartItem[]
}

model CartItem {
  id String @id @default(uuid())
  cart Cart @relation(fields: [cartId], references: [id])
  cartId String
  product Product @relation(fields: [productId], references: [id])
  productId String
  quantity Int
  created_at DateTime @default(now())
}

model Order {
  id String @id @default(uuid())
  orderNumber String @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  name String
  address String
  city String
  province String
  postal_code String
  phoneNumber String
  created_at DateTime @default(now())
  orderItems OrderItem[]
}

model OrderItem {
  id String @id @default(uuid())
  product Product @relation(fields: [productId], references: [id])
  productId String
  order Order @relation(fields: [orderId], references: [id])
  orderId String
  quantity Int
  price Float
  created_at DateTime @default(now())
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSED
  SENT
  FINISHED
  CANCELED
}


